<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JianMin-Xie的博客</title>
  <icon>https://www.gravatar.com/avatar/a92ada1fe196269fac3b83d6d401ca7c</icon>
  <subtitle>有道无术，术尚可求。有术无道，止于术。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jianmin-xie.github.io/"/>
  <updated>2020-03-09T13:48:20.532Z</updated>
  <id>https://jianmin-xie.github.io/</id>
  
  <author>
    <name>JianMin-Xie</name>
    <email>854377742@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Feign的一种简单使用方式</title>
    <link href="https://jianmin-xie.github.io/2020/03/09/Spring%20Cloud%20Feign%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>https://jianmin-xie.github.io/2020/03/09/Spring%20Cloud%20Feign%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-09T13:48:56.653Z</published>
    <updated>2020-03-09T13:48:20.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近学习Spring Cloud Feign让我记忆颇深。本文记录一下声明式客户端 Feign的一种简单使用姿势。</p><h2 id="创建nacos注册中心"><a href="#创建nacos注册中心" class="headerlink" title="创建nacos注册中心"></a>创建nacos注册中心</h2><p>创建注册中心具体流程笔者略过。</p><p>启动浏览器访问你的注册中心。</p><p><img src="https://i.loli.net/2020/03/09/xHb8L3aOzKsjMpG.png" alt="1.png"></p><p>此时还没有任何服务注册上来。</p><h2 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><ul><li><p><strong>建工程</strong><br>创建一个名为 <code>provider</code>的 SpringBoot工程，并在pom.xml中添加好对应依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>改主类</strong><br>添加 <code>@EnableDiscoveryClient</code>注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableDiscoveryClient</span></span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加控制器</strong> <code>DateServiceController</code></p></li></ul><p>提供一个Restful接口而已，该接口的作用是获取服务器上的时间并返回</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> EchoController &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> echo(<span class="meta">@PathVariable</span> <span class="built_in">String</span> <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Nacos Provider "</span> + <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 <code>application.yml</code>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 你的注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.102</span><span class="number">.133</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li><strong>启动工程</strong></li></ul><p>浏览器访问服务注册中心，我们发现服务提供者 <code>provider</code>已经注册到 nacos注册中心上：</p><p><img src="https://i.loli.net/2020/03/09/Nu59ItQ78yoUnH3.png" alt="2.png"></p><p>同时浏览器访问：<code>http://localhost:8070/echo/今天天气真好</code>，可以测试服务提供 <code>provider</code>提供的接口工作正常</p><p><img src="https://i.loli.net/2020/03/09/4VLHp1ju8RdD5fq.jpg" alt="3.JPG"></p><blockquote><p>测试发现服务提供者的接口工作正常</p></blockquote><p>接下来我们创建服务消费者，是 Feign该登场的时候了！</p><h2 id="创建基于-Feign的服务消费者"><a href="#创建基于-Feign的服务消费者" class="headerlink" title="创建基于 Feign的服务消费者"></a>创建基于 Feign的服务消费者</h2><ul><li>创建一个名为 <code>consumer</code>的 SpringBoot工程，并在pom.xml中添加好对应依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>修改应用主类</strong><br>主要是添加有关 Feign客户端的一些注解</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableFeignClients</span></span><br><span class="line"><span class="variable">@EnableDiscoveryClient</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>创建一个 Feign客户端的接口</strong>：<code>EchoService</code></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@FeignClient</span>(value = <span class="string">"provider"</span>)</span><br><span class="line">public interface EchoService &#123;</span><br><span class="line">    <span class="variable">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">    String echo(<span class="variable">@PathVariable</span>(<span class="string">"string"</span>) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显其内部用 <code>@FeignClient( value = &quot;provider&quot; )</code> 声明的方式指向了 服务提供者，而接口方法则实现了对 服务提供者接口的实际调用</p><ul><li><strong>创建控制器</strong>：<code>TestEchoController</code> 注意，这是服务消费者提供的 Rest接口</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class TestEchoController &#123;</span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private EchoService echoService;</span><br><span class="line">    <span class="variable">@GetMapping</span>(value = <span class="string">"/feign/echo/&#123;str&#125;"</span>)</span><br><span class="line">    public String echo(<span class="variable">@PathVariable</span> String str) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">echoService</span><span class="selector-class">.echo</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>配置</strong> <code>application.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册中心</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.102</span><span class="number">.133</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 端点检查（健康检查）</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li><strong>启动服务消费者</strong></li></ul><p>我们先去服务注册中心上看看，发现 服务消费者也注册上来了：</p><p><img src="https://i.loli.net/2020/03/09/EqAfPxzVmnhTbge.jpg" alt="4.JPG"></p><p>然后我们浏览器访问 服务消费者提供的Rest接口： <code>http://localhost:8080/feign/echo/今天天气不好</code></p><p><img src="https://i.loli.net/2020/03/09/kO6mEDMsIhtvqGe.jpg" alt="5.JPG"></p><p>这样我们就通过 服务消费者的 Feign客户端 取到了服务提供者 给予的接口数据。</p><blockquote><p>上面这就是声明式客户端 Feign的一种使用姿势，也是常用的手法，常见于很多Demo</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近学习Spring Cloud Feign让我记忆颇深。本文记录一下声明式客户端 Feign的一种简单使用姿势。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>让我们来看一下TCP的连接和释放过程</title>
    <link href="https://jianmin-xie.github.io/2020/03/09/%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8BTCP%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%87%8A%E6%94%BE%E8%BF%87%E7%A8%8B/"/>
    <id>https://jianmin-xie.github.io/2020/03/09/%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9D%A5%E7%9C%8B%E4%B8%80%E4%B8%8BTCP%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%87%8A%E6%94%BE%E8%BF%87%E7%A8%8B/</id>
    <published>2020-03-09T09:11:54.946Z</published>
    <updated>2020-03-07T13:13:06.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手的过程"><a href="#三次握手的过程" class="headerlink" title="三次握手的过程"></a>三次握手的过程</h2><p>1）主机A向主机B发送TCP连接请求数据包，其中包含主机A的初始序列号seq(A)=x。（其中报文中同步标志位SYN=1，ACK=0，表示这是一个TCP连接请求数据报文；序号seq=x，表明传输数据时的第一个数据字节的序号是x）；</p><p>2）主机B收到请求后，会发回连接确认数据包。（其中确认报文段中，标识位SYN=1，ACK=1，表示这是一个TCP连接响应数据报文，并含主机B的初始序列号seq(B)=y，以及主机B对主机A初始序列号的确认号ack(B)=seq(A)+1=x+1）</p><p>3）第三次，主机A收到主机B的确认报文后，还需作出确认，即发送一个序列号seq(A)=x+1；确认号为ack(A)=y+1的报文；</p><p><img src="https://uploadfiles.nowcoder.com/images/20180927/308572_1538027722640_EBFE71FE6E03CBB1AAE38A25DC56AFB2" alt=""></p><h2 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h2><p>假设主机A为客户端，主机B为服务器，其释放TCP连接的过程如下：<br>1） 关闭客户端到服务器的连接：首先客户端A发送一个FIN，用来关闭客户到服务器的数据传送，然后等待服务器的确认。其中终止标志位FIN=1，序列号seq=u。<br>2） 服务器收到这个FIN，它发回一个ACK，确认号ack为收到的序号加1。<br>3） 关闭服务器到客户端的连接：也是发送一个FIN给客户端。</p><p>4） 客户段收到FIN后，并发回一个ACK报文确认，并将确认序号seq设置为收到序号加1。 首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><p><img src="https://uploadfiles.nowcoder.com/images/20180927/308572_1538027843891_F17231DF387BA79A4CCC2E7CDD1C110E" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三次握手的过程&quot;&gt;&lt;a href=&quot;#三次握手的过程&quot; class=&quot;headerlink&quot; title=&quot;三次握手的过程&quot;&gt;&lt;/a&gt;三次握手的过程&lt;/h2&gt;&lt;p&gt;1）主机A向主机B发送TCP连接请求数据包，其中包含主机A的初始序列号seq(A)=x。（其中报文中
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
