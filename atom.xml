<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JianMin-Xie的博客</title>
  <icon>https://www.gravatar.com/avatar/a92ada1fe196269fac3b83d6d401ca7c</icon>
  <subtitle>有道无术，术尚可求。有术无道，止于术。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jianmin-xie.github.io/"/>
  <updated>2020-03-09T16:46:05.498Z</updated>
  <id>https://jianmin-xie.github.io/</id>
  
  <author>
    <name>JianMin-Xie</name>
    <email>854377742@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提高开发效率必备工具lombok</title>
    <link href="https://jianmin-xie.github.io/2020/03/10/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7lombok/"/>
    <id>https://jianmin-xie.github.io/2020/03/10/%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7lombok/</id>
    <published>2020-03-09T16:45:15.000Z</published>
    <updated>2020-03-09T16:46:05.498Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PS:免费章节转载注明出处，本篇如果是收费章节禁止转载。违者必究。<br>作者：字母哥博客<br>本文出自：springboot深入浅出系列</p></blockquote><h2 id="一、前置说明"><a href="#一、前置说明" class="headerlink" title="一、前置说明"></a>一、前置说明</h2><h3 id="本节大纲"><a href="#本节大纲" class="headerlink" title="本节大纲"></a>本节大纲</h3><ul><li><p>使用lombok插件的好处</p></li><li><p>如何安装lombok插件</p></li><li><p>使用lombok提高开发效率</p><h2 id="二、使用lombok插件的好处"><a href="#二、使用lombok插件的好处" class="headerlink" title="二、使用lombok插件的好处"></a>二、使用lombok插件的好处</h2><p>我们在java开发过程中，经常会有一些常规性的，重复性的工作。比如：</p></li><li><p>根据成员变量生成get和set方法</p></li><li><p>根据成员变量生成类的构造函数</p></li><li><p>重写toString()和hashCode方法</p></li><li><p>引入日志框架logFactory，用来打印日志<br>以上都是一些重复动作，模板代码。每次都手动生成既浪费时间，又增加了大量的冗余代码。我们可以使用lombok插件来解决这个问题。使我们的编码效率得到大幅度的提高！</p></li></ul><h2 id="三、如何安装lombok插件"><a href="#三、如何安装lombok插件" class="headerlink" title="三、如何安装lombok插件"></a>三、如何安装lombok插件</h2><p>笔者以InelliJ IDEA为例，安装lombok插件。打开 IDEA 的 File-&gt;Settings 面板，并选择 Plugins 选项，然后点击 “Browse repositories”。在搜索框输入”lombok”，结果中找到lombok点击install，然后重启 IDEA。</p><p><img src="https://img.kancloud.cn/45/d4/45d483570ca6807eae7de5e6c3ab3cd6_762x511.png" alt=""></p><p>我们还要在pom.xml里面加上如下依赖，插件生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在Spring Boot项目里面不需要加入版本号，spring Boot父项目会代为管理。如果是其他项目，请自行添加版本号！</p></blockquote><h2 id="四、-使用lombok注解简化开发"><a href="#四、-使用lombok注解简化开发" class="headerlink" title="四、 使用lombok注解简化开发"></a>四、 使用lombok注解简化开发</h2><h3 id="4-1-Data注解"><a href="#4-1-Data注解" class="headerlink" title="4.1 Data注解"></a>4.1 Data注解</h3><p>在java类上使用@Data注解，将为我们在编译期自动生成</p><ul><li>成员变量的get和set方法</li><li>equals方法</li><li>canEqual方法</li><li>hashCode方法</li><li>toString方法</li></ul><p><img src="https://img.kancloud.cn/ab/0a/ab0a2c82558587327f06cca3f094d964_763x473.png" alt=""></p><p>上图左侧是使用lombok注解Data，右侧是java字节码class文件反编译结果</p><h3 id="4-2-Slf4j注解"><a href="#4-2-Slf4j注解" class="headerlink" title="4.2 Slf4j注解"></a>4.2 Slf4j注解</h3><p>将在编译期自动帮我们引入Logger日志常量，我们在代码中就直接使用log.info或log.debug打印日志即可。下图中红色代码就用Slf4j注解代替就可以了。</p><p><img src="https://img.kancloud.cn/d2/4f/d24f55de1112606f804e9bf6280b3be0_750x441.png" alt=""></p><h3 id="4-3-Builder注解"><a href="#4-3-Builder注解" class="headerlink" title="4.3 Builder注解"></a>4.3 Builder注解</h3><p>在Java类上使用Builder注解之后，我们可以使用如下代码为对象属性赋值</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LombokPOJO lombokPOJO = LombokPOJO<span class="number">.</span>builder()</span><br><span class="line"><span class="meta">        .name</span>(<span class="string">"kobe"</span>)</span><br><span class="line"><span class="meta">        .age</span>(<span class="number">39</span>)</span><br><span class="line"><span class="meta">        .build</span>()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.kancloud.cn/bd/a3/bda328a18d6acb36be7a3673f2f4122c_1384x862.png" alt=""></p><h3 id="4-4-AllArgsConstructor注解"><a href="#4-4-AllArgsConstructor注解" class="headerlink" title="4.4 AllArgsConstructor注解"></a>4.4 AllArgsConstructor注解</h3><p>AllArgsConstructor注解将为我们在编译期自动生成：全参构造函数。</p><p><img src="https://img.kancloud.cn/f9/4f/f94f6763804e87144618e7c9cde0fd5a_1202x466.png" alt=""></p><p>有全参构造函数注解，自然就有无参构造函数注解：NoArgsConstructor注解。</p><p>lombok有非常多的好用的注解，这里给大家集中介绍几个经常会用到的。更多的用法参考github（插件安装图中，有github连接,上图中黄色区域）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;PS:免费章节转载注明出处，本篇如果是收费章节禁止转载。违者必究。&lt;br&gt;作者：字母哥博客&lt;br&gt;本文出自：springboot深入浅出系列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、前置说明&quot;&gt;&lt;a href=&quot;#一、前置说明&quot; c
      
    
    </summary>
    
    
      <category term="工具" scheme="https://jianmin-xie.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="lombok" scheme="https://jianmin-xie.github.io/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>什么是Vue</title>
    <link href="https://jianmin-xie.github.io/2020/03/10/%E4%BB%80%E4%B9%88%E6%98%AFVue/"/>
    <id>https://jianmin-xie.github.io/2020/03/10/%E4%BB%80%E4%B9%88%E6%98%AFVue/</id>
    <published>2020-03-09T16:40:15.000Z</published>
    <updated>2020-03-09T16:40:38.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-简介"><a href="#Vue-简介" class="headerlink" title="Vue 简介"></a>Vue 简介</h1><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<strong>Vue 的核心库只关注视图层</strong>，不仅易于上手，还便于与第三方库（如：<strong>vue-router，<del>vue-resource</del>，vuex</strong>）或既有项目整合。</p><p><a href="http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cHM6Ly9jbi52dWVqcy5vcmcv" target="_blank" rel="noopener">官方网站</a></p><h1 id="MVVM-模式的实现者"><a href="#MVVM-模式的实现者" class="headerlink" title="MVVM 模式的实现者"></a>MVVM 模式的实现者</h1><p>我们知道 MVVM 表示如下：</p><ul><li>Model：模型层，在这里表示 JavaScript 对象</li><li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li><li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li></ul><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/65dff7b6ba81f8f.png" alt=""></p><p>在 MVVM 架构中，是不允许 <strong>数据</strong> 和 <strong>视图</strong> 直接通信的，只能通过 <strong>ViewModel</strong> 来通信，而 ViewModel 就是定义了一个 <strong>Observer</strong> 观察者</p><ul><li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li><li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变</li></ul><p>至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 <strong>DOM 监听</strong> 与 <strong>数据绑定</strong></p><h1 id="其它-MVVM-实现者"><a href="#其它-MVVM-实现者" class="headerlink" title="其它 MVVM 实现者"></a>其它 MVVM 实现者</h1><ul><li>AngularJS</li><li>ReactJS</li><li>微信小程序</li></ul><h1 id="为什么要使用-Vue-js"><a href="#为什么要使用-Vue-js" class="headerlink" title="为什么要使用 Vue.js"></a>为什么要使用 Vue.js</h1><ul><li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li><li>移动优先。更适合移动端，比如移动端的 Touch 事件</li><li>易上手，学习曲线平稳，文档齐全</li><li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li><li>开源，社区活跃度高</li></ul><h1 id="Vue-js-的两大核心要素"><a href="#Vue-js-的两大核心要素" class="headerlink" title="Vue.js 的两大核心要素"></a>Vue.js 的两大核心要素</h1><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/49933f4eeb6c704.png" alt=""></p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>页面上每个独立的可交互的区域视为一个组件</li><li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li><li>页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-简介&quot;&gt;&lt;a href=&quot;#Vue-简介&quot; class=&quot;headerlink&quot; title=&quot;Vue 简介&quot;&gt;&lt;/a&gt;Vue 简介&lt;/h1&gt;&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jianmin-xie.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://jianmin-xie.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Feign的一种简单使用方式</title>
    <link href="https://jianmin-xie.github.io/2020/03/10/Spring-Cloud-Feign%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>https://jianmin-xie.github.io/2020/03/10/Spring-Cloud-Feign%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-09T16:24:15.000Z</published>
    <updated>2020-03-10T06:17:40.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近学习Spring Cloud Feign让我记忆颇深。本文记录一下声明式客户端 Feign的一种简单使用姿势。</p><h2 id="创建nacos注册中心"><a href="#创建nacos注册中心" class="headerlink" title="创建nacos注册中心"></a>创建nacos注册中心</h2><p>创建注册中心具体流程笔者略过。</p><p>启动浏览器访问你的注册中心。</p><p><img src="https://i.loli.net/2020/03/09/xHb8L3aOzKsjMpG.png" alt="1.png"></p><p>此时还没有任何服务注册上来。</p><h2 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><ul><li><p><strong>建工程</strong><br>创建一个名为 <code>provider</code>的 SpringBoot工程，并在pom.xml中添加好对应依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>改主类</strong><br>添加 <code>@EnableDiscoveryClient</code>注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableDiscoveryClient</span></span><br><span class="line">public class ProviderApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加控制器</strong> <code>DateServiceController</code></p></li></ul><p>提供一个Restful接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> EchoController &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> echo(<span class="meta">@PathVariable</span> <span class="built_in">String</span> <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Nacos Provider "</span> + <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置 <code>application.yml</code>文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 你的注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.102</span><span class="number">.133</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li><strong>启动工程</strong></li></ul><p>浏览器访问服务注册中心，我们发现服务提供者 <code>provider</code>已经注册到 nacos注册中心上：</p><p><img src="https://i.loli.net/2020/03/09/Nu59ItQ78yoUnH3.png" alt="2.png"></p><p>同时浏览器访问：<code>http://localhost:8070/echo/今天天气真好</code>，可以测试服务提供 <code>provider</code>提供的接口工作正常</p><p><img src="https://i.loli.net/2020/03/09/4VLHp1ju8RdD5fq.jpg" alt="3.JPG"></p><blockquote><p>测试发现服务提供者的接口工作正常</p></blockquote><p>接下来我们创建服务消费者，是 Feign该登场的时候了！</p><h2 id="创建基于-Feign的服务消费者"><a href="#创建基于-Feign的服务消费者" class="headerlink" title="创建基于 Feign的服务消费者"></a>创建基于 Feign的服务消费者</h2><ul><li>创建一个名为 <code>consumer</code>的 SpringBoot工程，并在pom.xml中添加好对应依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot End --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Begin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud End --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>修改应用主类</strong><br>主要是添加有关 Feign客户端的一些注解</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableFeignClients</span></span><br><span class="line"><span class="variable">@EnableDiscoveryClient</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class ConsumerApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>创建一个 Feign客户端的接口</strong>：<code>EchoService</code></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@FeignClient</span>(value = <span class="string">"provider"</span>)</span><br><span class="line">public interface EchoService &#123;</span><br><span class="line">    <span class="variable">@GetMapping</span>(value = <span class="string">"/echo/&#123;string&#125;"</span>)</span><br><span class="line">    String echo(<span class="variable">@PathVariable</span>(<span class="string">"string"</span>) String string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显其内部用 <code>@FeignClient( value = &quot;provider&quot; )</code> 声明的方式指向了 服务提供者，而接口方法则实现了对 服务提供者接口的实际调用</p><ul><li><strong>创建控制器</strong>：<code>TestEchoController</code> 注意，这是服务消费者提供的 Rest接口</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class TestEchoController &#123;</span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private EchoService echoService;</span><br><span class="line">    <span class="variable">@GetMapping</span>(value = <span class="string">"/feign/echo/&#123;str&#125;"</span>)</span><br><span class="line">    public String echo(<span class="variable">@PathVariable</span> String str) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">echoService</span><span class="selector-class">.echo</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>配置</strong> <code>application.yml</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册中心</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.102</span><span class="number">.133</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 服务端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 端点检查（健康检查）</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li><strong>启动服务消费者</strong></li></ul><p>我们先去服务注册中心上看看，发现 服务消费者也注册上来了：</p><p><img src="https://i.loli.net/2020/03/09/EqAfPxzVmnhTbge.jpg" alt="4.JPG"></p><p>然后我们浏览器访问 服务消费者提供的Rest接口： <code>http://localhost:8080/feign/echo/今天天气不好</code></p><p><img src="https://i.loli.net/2020/03/09/kO6mEDMsIhtvqGe.jpg" alt="5.JPG"></p><p>这样我们就通过 服务消费者的 Feign客户端 取到了服务提供者 给予的接口数据。</p><blockquote><p>上面这就是声明式客户端 Feign的一种使用姿势，也是常用的手法，常见于很多Demo</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近学习Spring Cloud Feign让我记忆颇深。本文记录一下声明式客户端 Feign的一种简单使用姿势。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="后端" scheme="https://jianmin-xie.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SpringBoot" scheme="https://jianmin-xie.github.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="https://jianmin-xie.github.io/tags/SpringCloud/"/>
    
      <category term="feign" scheme="https://jianmin-xie.github.io/tags/feign/"/>
    
      <category term="Spring" scheme="https://jianmin-xie.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
